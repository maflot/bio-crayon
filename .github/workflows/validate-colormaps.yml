name: Validate Community Colormaps

on:
  pull_request:
    paths:
      - 'community_colormaps/**'
      - 'schemas/**'
      - 'bio_crayon/**'
      - 'tests/**'

jobs:
  validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest matplotlib numpy
          
      - name: Validate JSON Schema
        run: |
          python -c "
          import json
          import jsonschema
          from pathlib import Path
          from bio_crayon.validators import validate_colormap_data
          
          # Load schema
          with open('schemas/colormap_schema.json') as f:
              schema = json.load(f)
          
          # Validate all colormaps
          community_dir = Path('community_colormaps')
          errors = []
          
          for json_file in community_dir.rglob('*.json'):
              try:
                  with open(json_file) as f:
                      data = json.load(f)
                  
                  # Validate against JSON schema
                  jsonschema.validate(data, schema)
                  
                  # Validate with metadata requirements for community colormaps
                  validation_errors = validate_colormap_data(data, require_metadata=True)
                  if validation_errors:
                      errors.append(f'ERROR: {json_file} - Validation errors: {validation_errors}')
                  else:
                      print(f'PASS: {json_file} - Valid')
                      
              except Exception as e:
                  errors.append(f'ERROR: {json_file} - {e}')
          
          if errors:
              print('\\nValidation Errors:')
              for error in errors:
                  print(error)
              exit(1)
          else:
              print('\\nüéâ All colormaps validated successfully!')
          "
          
      - name: Check Colorblind Accessibility
        run: |
          python -c "
          import sys
          from pathlib import Path
          sys.path.append('.')
          
          from bio_crayon import BioCrayon
          
          community_dir = Path('community_colormaps')
          errors = []
          
          for json_file in community_dir.rglob('*.json'):
              try:
                  bc = BioCrayon(json_file)
                  colormap_name = json_file.stem
                  
                  # Check if categorical colormap is colorblind safe
                  colormap = bc.get_colormap(colormap_name)
                  if colormap['type'] == 'categorical':
                      if not bc.is_colorblind_safe(colormap_name):
                          errors.append(f'‚ùå {json_file} - Not colorblind safe')
                      else:
                          print(f'‚úÖ {json_file} - Colorblind safe')
                  else:
                      print(f'‚ÑπÔ∏è  {json_file} - Continuous colormap (accessibility check skipped)')
                      
              except Exception as e:
                  errors.append(f'ERROR: {json_file} - {e}')
          
          if errors:
              print('\\nAccessibility Errors:')
              for error in errors:
                  print(error)
              exit(1)
          else:
              print('\\nüéâ All categorical colormaps are colorblind safe!')
          "
          
      - name: Run Tests
        run: |
          pytest tests/ -v
          
      - name: Generate Preview Images
        run: |
          python -c "
          import matplotlib
          matplotlib.use('Agg')  # Non-interactive backend
          import matplotlib.pyplot as plt
          from pathlib import Path
          import sys
          sys.path.append('.')
          
          from bio_crayon import BioCrayon
          
          # Create previews directory
          preview_dir = Path('.github/previews')
          preview_dir.mkdir(exist_ok=True)
          
          community_dir = Path('community_colormaps')
          
          for json_file in community_dir.rglob('*.json'):
              try:
                  bc = BioCrayon(json_file)
                  colormap_name = json_file.stem
                  
                  # Generate preview
                  fig = bc.plot_colormap(colormap_name)
                  preview_path = preview_dir / f'{json_file.parent.name}_{colormap_name}.png'
                  fig.savefig(preview_path, dpi=150, bbox_inches='tight')
                  plt.close(fig)
                  
                  print(f'‚úÖ Generated preview for {json_file}')
                  
              except Exception as e:
                  print(f'‚ùå Failed to generate preview for {json_file}: {e}')
          "
          
      - name: Upload Preview Images
        uses: actions/upload-artifact@v3
        with:
          name: colormap-previews
          path: .github/previews/ 