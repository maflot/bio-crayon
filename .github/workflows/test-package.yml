name: Test Package

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, 3.10, 3.11]
        exclude:
          # Exclude Python 3.8 on Windows due to matplotlib compatibility issues
          - os: windows-latest
            python-version: 3.8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov matplotlib numpy requests

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=bio_crayon --cov-report=xml --cov-report=term-missing

      - name: Run integration tests
        run: |
          python -c "
          import sys
          sys.path.append('.')
          
          from bio_crayon import BioCrayon
          
          # Test basic functionality
          print('Testing basic functionality...')
          
          # Test user colormap (no metadata required)
          user_data = {
              'colormaps': {
                  'test_colors': {
                      'type': 'categorical',
                      'colors': {'red': '#FF0000', 'green': '#00FF00'}
                  }
              }
          }
          bc_user = BioCrayon(user_data)
          assert 'test_colors' in bc_user.list_colormaps()
          print('âœ… User colormap test passed')
          
          # Test community colormap (metadata required)
          community_data = {
              'metadata': {
                  'name': 'Test Collection',
                  'version': '1.0'
              },
              'colormaps': {
                  'test_colors': {
                      'type': 'categorical',
                      'colors': {'red': '#FF0000', 'green': '#00FF00'}
                  }
              }
          }
          bc_community = BioCrayon(community_data, require_metadata=True)
          assert 'test_colors' in bc_community.list_colormaps()
          print('âœ… Community colormap test passed')
          
          # Test color retrieval
          color = bc_user.get_color('test_colors', 'red')
          assert color == '#FF0000'
          print('âœ… Color retrieval test passed')
          
          # Test matplotlib conversion
          cmap = bc_user.to_matplotlib('test_colors')
          assert cmap is not None
          print('âœ… Matplotlib conversion test passed')
          
          print('ðŸŽ‰ All integration tests passed!')
          "

      - name: Test examples
        run: |
          python examples/minimal_colormap_example.py
          python examples/basic_usage.py

      - name: Test community colormaps
        run: |
          python test_allen_brain_colormaps.py
          python test_allen_immune_colormaps.py

      - name: Test package installation
        run: |
          pip install build
          python -m build --wheel
          pip install dist/*.whl
          python -c "import bio_crayon; print('âœ… Package installed successfully')"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy

      - name: Check code formatting
        run: |
          black --check --diff bio_crayon/ tests/ examples/

      - name: Check import sorting
        run: |
          isort --check-only --diff bio_crayon/ tests/ examples/

      - name: Lint with flake8
        run: |
          flake8 bio_crayon/ tests/ examples/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 bio_crayon/ tests/ examples/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type check with mypy
        run: |
          mypy bio_crayon/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run security checks
        run: |
          bandit -r bio_crayon/ -f json -o bandit-report.json || true
          safety check

  documentation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme

      - name: Build documentation
        run: |
          # Check if docs directory exists and build if it does
          if [ -d "docs" ]; then
            cd docs
            make html
          else
            echo "No docs directory found, skipping documentation build"
          fi

  performance:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install performance testing dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest-benchmark

      - name: Run performance tests
        run: |
          python -c "
          import time
          import sys
          sys.path.append('.')
          
          from bio_crayon import BioCrayon
          
          # Performance test for color retrieval
          print('Running performance tests...')
          
          # Create a large colormap
          large_colormap = {
              'colormaps': {
                  'large_test': {
                      'type': 'categorical',
                      'colors': {f'category_{i}': f'#{i:06x}' for i in range(1000)}
                  }
              }
          }
          
          bc = BioCrayon(large_colormap)
          
          # Test color retrieval performance
          start_time = time.time()
          for i in range(1000):
              bc.get_color('large_test', f'category_{i % 1000}')
          end_time = time.time()
          
          retrieval_time = end_time - start_time
          print(f'Color retrieval: {retrieval_time:.4f}s for 1000 operations')
          
          # Test matplotlib conversion performance
          start_time = time.time()
          cmap = bc.to_matplotlib('large_test')
          end_time = time.time()
          
          conversion_time = end_time - start_time
          print(f'Matplotlib conversion: {conversion_time:.4f}s')
          
          # Performance thresholds
          assert retrieval_time < 1.0, f'Color retrieval too slow: {retrieval_time}s'
          assert conversion_time < 2.0, f'Matplotlib conversion too slow: {conversion_time}s'
          
          print('âœ… Performance tests passed!')
          " 